(()=>{"use strict";class e{constructor(){this.news=new class{draw(e){const t=e.length>=10?e.filter(((e,t)=>t<10)):e,r=document.createDocumentFragment(),s=document.querySelector("#newsItemTemp");t.forEach(((e,t)=>{const o=s.content.cloneNode(!0);t%2&&o.querySelector(".news__item").classList.add("alt"),o.querySelector(".news__meta-photo").style.backgroundImage=`url(${e.urlToImage||"img/news_placeholder.jpg"})`,o.querySelector(".news__meta-author").textContent=e.author||e.source.name,o.querySelector(".news__meta-date").textContent=e.publishedAt.slice(0,10).split("-").reverse().join("-"),o.querySelector(".news__description-title").textContent=e.title,o.querySelector(".news__description-source").textContent=e.source.name,o.querySelector(".news__description-content").textContent=e.description,o.querySelector(".news__read-more a").setAttribute("href",e.url),r.append(o)})),document.querySelector(".news").innerHTML="",document.querySelector(".news").appendChild(r)}},this.sources=new class{draw(e){const t=document.createDocumentFragment(),r=document.querySelector("#sourceItemTemp");e.forEach((e=>{const s=r.content.cloneNode(!0);s.querySelector(".source__item-name").textContent=e.name,s.querySelector(".source__item").setAttribute("data-source-id",e.id),t.append(s)})),document.querySelector(".sources").append(t)}}}drawNews(e){const t=e?.articles?e?.articles:[];this.news.draw(t)}drawSources(e){const t=e?.sources?e?.sources:[];this.sources.draw(t)}}(new class{constructor(){this.controller=new class extends class extends class{constructor(e,t){this.baseLink=e,this.options=t}getResp({endpoint:e,options:t={}},r=(()=>{console.error("No callback for GET response")})){this.load("GET",e,r,t)}errorHandler(e){if(!e.ok)throw 401!==e.status&&404!==e.status||console.log(`Sorry, but there is ${e.status} error: ${e.statusText}`),Error(e.statusText);return e}makeUrl(e,t){const r={...this.options,...e};let s=`${this.baseLink}${t}?`;return Object.keys(r).forEach((e=>{s+=`${e}=${r[e]}&`})),s.slice(0,-1)}load(e,t,r,s={}){fetch(this.makeUrl(s,t),{method:e}).then(this.errorHandler).then((e=>e.json())).then((e=>r(e))).catch((e=>console.error(e)))}}{constructor(){super("https://newsapi.org/v2/",{apiKey:"08fb5442cc4b41a3b7e211b5078e5cba"})}}{getSources(e){super.getResp({endpoint:"sources"},e)}getNews(e,t){let r=e.target;const s=e.currentTarget;for(;r!==s;){if(r.classList.contains("source__item")){const e=r.getAttribute("data-source-id");return void(s.getAttribute("data-source")!==e&&(s.setAttribute("data-source",e),super.getResp({endpoint:"everything",options:{sources:e}},t)))}r=r.parentNode}}},this.view=new e}start(){document.querySelector(".sources").addEventListener("click",(e=>this.controller.getNews(e,(e=>this.view.drawNews(e))))),this.controller.getSources((e=>this.view.drawSources(e)))}}).start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,